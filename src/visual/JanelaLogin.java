package visual;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author andreibubolz
 */
public class JanelaLogin extends javax.swing.JFrame {

    public Socket cliente;
    public ObjectOutputStream saida;
    public ObjectInputStream entrada;
    public Socket comunicacaoClienteJogo;
    public ObjectOutputStream saidaJogo;
    public ObjectInputStream entradaJogo;
    private int IDConexao;
    private int IDConexaoJogo;
    private Thread aguardaAdversario;
    private boolean segueProcurando;
    private AguardaAdversario aguardaAd;
    private String IP ;
    private MenuPrincipal janelaMenu;
    //------------
    private final Color VERDE = new Color(0, 153, 0);
    private final Color VERMELHO = new Color(255, 0, 0);
    private final Color AZUL = new Color(0, 0, 255);

    
    public JanelaLogin(MenuPrincipal menu,String ip) {
        initComponents();
        
        this.IP = ip;
        cliente = null;
        IDConexao = -1;
        this.textoInfoSala.setVisible(false);
        this.tabelaSalas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.botaoEntrarSala.setEnabled(false);
        this.textoAguardandoLogin.setText("Aguardando Conexão...");
        this.botaoRefresh.setVisible(false);
        aguardaAd = new AguardaAdversario(this);
        janelaMenu = menu;

        obtemConexaoServidor();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textoUsuario = new javax.swing.JTextField();
        textoAvisos = new javax.swing.JLabel();
        botaoEntrar = new javax.swing.JButton();
        botaoCadastrar = new javax.swing.JButton();
        textoSenha = new javax.swing.JPasswordField();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaSalas = new javax.swing.JTable();
        botaoEntrarSala = new javax.swing.JButton();
        botaoVoltar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        textoNumOnline = new javax.swing.JLabel();
        textoInfoSala = new javax.swing.JLabel();
        botaoRefresh = new javax.swing.JButton();
        textoAguardandoLogin = new javax.swing.JLabel();
        textoServidorOnOff = new javax.swing.JLabel();
        botaoRepetir = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Unispace", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Modo Multiplayer");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Login", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Unispace", 1, 14), new java.awt.Color(102, 102, 102))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Unispace", 1, 14)); // NOI18N
        jLabel4.setText("Usuário:");

        jLabel5.setFont(new java.awt.Font("Unispace", 1, 14)); // NOI18N
        jLabel5.setText("Senha:");

        textoUsuario.setFont(new java.awt.Font("Unispace", 0, 14)); // NOI18N
        textoUsuario.setText("AndreiBubolz");

        textoAvisos.setFont(new java.awt.Font("Unispace", 1, 10)); // NOI18N

        botaoEntrar.setFont(new java.awt.Font("Unispace", 1, 12)); // NOI18N
        botaoEntrar.setText("Entrar");
        botaoEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEntrarActionPerformed(evt);
            }
        });

        botaoCadastrar.setFont(new java.awt.Font("Unispace", 1, 12)); // NOI18N
        botaoCadastrar.setText("Cadastrar");
        botaoCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCadastrarActionPerformed(evt);
            }
        });

        textoSenha.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textoSenha.setText("12345");
        textoSenha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                textoSenhaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                textoSenhaMouseExited(evt);
            }
        });
        textoSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textoSenhaKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textoAvisos, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoEntrar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textoUsuario)
                            .addComponent(textoSenha))))
                .addGap(1, 1, 1))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textoSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botaoEntrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoCadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(textoAvisos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Salas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Unispace", 1, 14), new java.awt.Color(102, 102, 102))); // NOI18N

        tabelaSalas.setFont(new java.awt.Font("Unispace", 0, 12)); // NOI18N
        tabelaSalas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Sala", "Jogador 1", "Jogador 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaSalas.setToolTipText("");
        tabelaSalas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabelaSalas);
        if (tabelaSalas.getColumnModel().getColumnCount() > 0) {
            tabelaSalas.getColumnModel().getColumn(0).setResizable(false);
            tabelaSalas.getColumnModel().getColumn(0).setPreferredWidth(29);
            tabelaSalas.getColumnModel().getColumn(1).setResizable(false);
            tabelaSalas.getColumnModel().getColumn(1).setPreferredWidth(125);
            tabelaSalas.getColumnModel().getColumn(2).setResizable(false);
            tabelaSalas.getColumnModel().getColumn(2).setPreferredWidth(125);
        }

        botaoEntrarSala.setFont(new java.awt.Font("Unispace", 1, 12)); // NOI18N
        botaoEntrarSala.setText("Entrar na Sala");
        botaoEntrarSala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEntrarSalaActionPerformed(evt);
            }
        });

        botaoVoltar.setFont(new java.awt.Font("Unispace", 1, 12)); // NOI18N
        botaoVoltar.setText("Voltar");
        botaoVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVoltarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Unispace", 1, 11)); // NOI18N
        jLabel2.setText("Jogadores Online:");

        textoNumOnline.setFont(new java.awt.Font("Unispace", 1, 11)); // NOI18N
        textoNumOnline.setForeground(new java.awt.Color(0, 0, 255));
        textoNumOnline.setText("0");

        textoInfoSala.setFont(new java.awt.Font("Unispace", 1, 11)); // NOI18N
        textoInfoSala.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        textoInfoSala.setText("Aguardando adversario...");

        botaoRefresh.setFont(new java.awt.Font("Unispace", 1, 12)); // NOI18N
        botaoRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icones/66934.png"))); // NOI18N
        botaoRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(botaoVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(botaoRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoEntrarSala, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoNumOnline, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoInfoSala, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(9, 9, 9))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textoNumOnline)
                    .addComponent(textoInfoSala))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoEntrarSala)
                    .addComponent(botaoRefresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoVoltar, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        textoAguardandoLogin.setFont(new java.awt.Font("Unispace", 1, 12)); // NOI18N
        textoAguardandoLogin.setForeground(new java.awt.Color(0, 51, 51));
        textoAguardandoLogin.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        textoAguardandoLogin.setText("Aguardando Login...");

        textoServidorOnOff.setFont(new java.awt.Font("Unispace", 1, 12)); // NOI18N
        textoServidorOnOff.setForeground(new java.awt.Color(0, 204, 51));
        textoServidorOnOff.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        textoServidorOnOff.setText("Servidor Online!");

        botaoRepetir.setFont(new java.awt.Font("Unispace", 1, 12)); // NOI18N
        botaoRepetir.setText("Repetir");
        botaoRepetir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRepetirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(27, 27, 27))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textoServidorOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botaoRepetir, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textoAguardandoLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSeparator2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoAguardandoLogin)
                    .addComponent(textoServidorOnOff)
                    .addComponent(botaoRepetir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void botaoRepetirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRepetirActionPerformed
        this.obtemConexaoServidor();
    }//GEN-LAST:event_botaoRepetirActionPerformed

    private void botaoVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVoltarActionPerformed
        voltarMenu();
    }//GEN-LAST:event_botaoVoltarActionPerformed

    private void botaoEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEntrarActionPerformed
        try {
            if (this.botaoEntrar.getText().equals("Cancelar")) {

                saida.writeObject(null);

                this.textoAvisos.setVisible(true);
                this.textoAvisos.setText("");
                this.textoAvisos.setForeground(Color.GREEN);
                this.textoUsuario.setEditable(true);
                this.textoSenha.setEditable(true);
                this.botaoEntrar.setEnabled(true);
                this.botaoCadastrar.setText("Cadastrar");
                this.botaoEntrar.setText("Entrar");
            } else {
                tentaLogin();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_botaoEntrarActionPerformed

    private void tentaLogin() {

        int codigoLogin;

        if (this.cliente == null) {
            this.textoAvisos.setVisible(true);
            this.textoAvisos.setForeground(VERMELHO);
            this.textoAvisos.setText("Não conectado!");
            return;
        }

        if (this.textoUsuario.getText().isEmpty()) {
            this.textoAvisos.setVisible(true);
            this.textoAvisos.setForeground(VERMELHO);
            this.textoAvisos.setText("Campo Usuário não preenchido");
        } else if (this.textoSenha.getText().isEmpty()) {
            this.textoAvisos.setVisible(true);
            this.textoAvisos.setForeground(VERMELHO);
            this.textoAvisos.setText("Campo Senha não preenchido");
        } else {

            try {
                saida.writeObject(1);
                saida.writeObject(this.textoUsuario.getText()); //Envia para o servidor o nick digitado.
                saida.writeObject(this.textoSenha.getText()); //Envia para o servidor a senha digitada.

                codigoLogin = (int) entrada.readObject(); // Recebe do servidor o código referente a operação de login. (1-sucesso,2-Senha errada,3-Nick nao cadastrado,4-Já logado)

                switch (codigoLogin) {
                    case 1:
                        this.textoAvisos.setVisible(true);
                        this.textoAvisos.setForeground(AZUL);
                        this.textoAvisos.setText("Usuário logado com sucesso!");
                        this.textoUsuario.setEditable(false);
                        this.textoSenha.setEditable(false);
                        this.textoAguardandoLogin.setVisible(false);
                        this.botaoRepetir.setVisible(false);
                        this.textoServidorOnOff.setFont(this.textoServidorOnOff.getFont().deriveFont(16.0f));
                        this.botaoRefresh.setVisible(true);
                        this.textoServidorOnOff.setText("Conectado!");

                        this.atualizaListaSalas();

                        this.botaoEntrar.setEnabled(false);
                        this.botaoCadastrar.setEnabled(false);
                        this.botaoEntrarSala.setEnabled(true);
                        saida.writeObject(this.IDConexao);

                        break;
                    case 2:
                        this.textoAvisos.setVisible(true);
                        this.textoAvisos.setForeground(VERMELHO);
                        this.textoAvisos.setText("Senha inválida!");
                        break;
                    case 3:
                        this.textoAvisos.setVisible(true);
                        this.textoAvisos.setForeground(VERMELHO);
                        this.textoAvisos.setText("Usuário não cadastrado!");
                        break;
                    case 4:
                        this.textoAvisos.setVisible(true);
                        this.textoAvisos.setForeground(VERMELHO);
                        this.textoAvisos.setText("Usuário já logado!");
                        break;
                    default:
                        break;
                }

            } catch (IOException | ClassNotFoundException ex) {
                this.textoAvisos.setText("Erro de conexão!");
                this.textoAvisos.setForeground(VERMELHO);
                this.textoServidorOnOff.setText("Servidor Offline");
                this.textoServidorOnOff.setForeground(VERMELHO);
                this.textoServidorOnOff.setFont(this.textoServidorOnOff.getFont().deriveFont(12.0f));
                this.textoAguardandoLogin.setText("Aguardando Conexão...");
                this.textoAguardandoLogin.setVisible(true);
                this.botaoRepetir.setVisible(true);
                this.botaoRepetir.setText("Repetir");
            }

        }
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (this.botaoVoltar.isEnabled()) {
            voltarMenu();
        }
        else
           JOptionPane.showMessageDialog(this, "Primeiro saia da sala!", "ERRO!", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_formWindowClosing

    private void voltarMenu() {

        MenuPrincipal men = new MenuPrincipal();
        men.setVisible(true);

        try {
            //Caso for clicado o botão de voltar, envia pro servidor um "sinal" de que é pra fechar a conexão.
            if (this.botaoCadastrar.getText().equals("Confirma")) //Evita bug
            {
                saida.writeObject(null);
            } else if (!this.botaoEntrar.isEnabled()) {
                saida.writeObject(4);   //4 para deslogar o cliente
                saida.writeObject(this.IDConexao);
            } else {
                if(saida != null)
                    saida.writeObject(3);   //3 porq nao tá logado.
            }
        } catch (IOException ex) {
            
        }

        try {
            if(entrada != null)
                entrada.close();
            if(saida != null)
                saida.close();
            
            cliente = null;
        } catch (IOException ex) {
            
        }
        this.botaoEntrarSala.setEnabled(false);
        this.dispose();

    }

    private void botaoCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCadastrarActionPerformed
        if (this.botaoCadastrar.getText().equals("Confirma")) {
            if (!this.textoSenha.getText().isEmpty()) {

                try {
                    saida.writeObject(this.textoSenha.getText());

                    int codOp = (int) entrada.readObject();

                    if (codOp == 2) {
                        this.textoAvisos.setVisible(true);
                        this.textoAvisos.setForeground(VERMELHO);
                        this.textoAvisos.setText("Senhas não conferem!");
                        this.textoUsuario.setEditable(true);
                        this.botaoEntrar.setEnabled(true);
                        this.botaoCadastrar.setText("Cadastrar");
                    } else if (codOp == 1) {
                        this.textoAvisos.setVisible(true);
                        this.textoAvisos.setForeground(VERDE);
                        this.textoAvisos.setText("Cadastrado com sucesso!");
                        this.textoUsuario.setText("");
                        this.textoSenha.setText("");
                        this.textoUsuario.setEditable(true);
                        this.botaoEntrar.setEnabled(true);
                        this.botaoEntrar.setText("Entrar");
                        this.botaoCadastrar.setText("Cadastrar");
                    }
                } catch (IOException | ClassNotFoundException ex) {
                    ex.printStackTrace();
                }

            }
        } else {
            this.botaoEntrar.setText("Cancelar");
            tentaCadastro();
        }
    }//GEN-LAST:event_botaoCadastrarActionPerformed

    private void tentaCadastro() {

        int codigoCadastro;

        if (this.cliente == null) {
            this.textoAvisos.setVisible(true);
            this.textoAvisos.setForeground(VERMELHO);
            this.textoAvisos.setText("Não conectado!");
            return;
        }

        if (this.textoUsuario.getText().isEmpty()) {
            this.textoAvisos.setVisible(true);
            this.textoAvisos.setForeground(VERMELHO);
            this.textoAvisos.setText("Campo Usuário não preenchido");
        } else if (this.textoSenha.getText().isEmpty()) {
            this.textoAvisos.setVisible(true);
            this.textoAvisos.setForeground(VERMELHO);
            this.textoAvisos.setText("Campo Senha não preenchido");
        } else {

            try {

                saida.writeObject(2);

                saida.writeObject(this.textoUsuario.getText()); //Envia para o servidor o nick digitado.
                saida.writeObject(this.textoSenha.getText()); //Envia para o servidor a senha digitada.

                codigoCadastro = (int) entrada.readObject(); // Recebe do servidor o código referente a operação de login. (1-sucesso,2-Senha errada,3-Nick nao cadastrado,4-Já logado)

                switch (codigoCadastro) {
                    case 1:
                        this.textoAvisos.setVisible(true);
                        this.textoAvisos.setForeground(VERMELHO);
                        this.textoAvisos.setText("Digite a senha novamente");
                        this.textoSenha.setText("");
                        this.textoUsuario.setEditable(false);
                        this.botaoCadastrar.setText("Confirma");
                        break;
                    case 2:
                        this.textoAvisos.setVisible(true);
                        this.textoAvisos.setForeground(VERMELHO);
                        this.textoAvisos.setText("Usuário já cadastrado!");
                        break;
                    case 3:
                        this.textoAvisos.setVisible(true);
                        this.textoAvisos.setForeground(VERMELHO);
                        this.textoAvisos.setText("Senha inválida!");
                        break;
                    default:
                        break;
                }

            } catch (IOException | ClassNotFoundException ex) {
                ex.printStackTrace();
            }

        }
    }

    private void botaoEntrarSalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEntrarSalaActionPerformed
        try {
            if (this.botaoEntrarSala.getText().equals("Sair da Sala")) {

                saiSala();
                
                saida.writeObject(6);
                atualizaListaSalas();
                
            } else {
                tentaEntrarSala();
            }
        } catch (IOException | ClassNotFoundException | InterruptedException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_botaoEntrarSalaActionPerformed

    private void botaoRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRefreshActionPerformed
        try {
            saida.writeObject(6);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        atualizaListaSalas();
    }//GEN-LAST:event_botaoRefreshActionPerformed

    private void textoSenhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoSenhaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            tentaLogin();
        }
    }//GEN-LAST:event_textoSenhaKeyPressed

    private void textoSenhaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textoSenhaMouseEntered
        this.textoSenha.setEchoChar((char)0);
    }//GEN-LAST:event_textoSenhaMouseEntered

    private void textoSenhaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textoSenhaMouseExited
        this.textoSenha.setEchoChar('*');
    }//GEN-LAST:event_textoSenhaMouseExited

    private void tentaEntrarSala() throws IOException, ClassNotFoundException, InterruptedException {

        saida.writeObject(5); /////////////////////////////// Escreve comando para tentar entrar sala

        //---------------------------------------------------------------------------------------------
        int linhaSelecionada = tabelaSalas.getSelectedRow();
        saida.writeObject(linhaSelecionada); /////////////////////////////// Envia linha selecionada na tabela, referente ao numero da sala.
        saida.writeObject(this.textoUsuario.getText()); /////////////////////////////// SAIDA 3

        int estadoSala = (int) entrada.readObject();    /////////////////////////////// Recebe estado da sala

        switch (estadoSala) {
            case -1:
                //JOptionPane.showMessageDialog(this, "Selecione uma sala!", "ERRO!", JOptionPane.ERROR_MESSAGE);
                this.textoInfoSala.setVisible(true);
                this.textoInfoSala.setForeground(VERMELHO);
                this.textoInfoSala.setText("Selecione uma Sala!");
                break;
            case -2:
                this.textoInfoSala.setVisible(true);
                this.textoInfoSala.setForeground(VERMELHO);
                this.textoInfoSala.setText("Usuário já está em uma Sala!");
                break;
            default:
                int entrouSala = (int) entrada.readObject(); /////////////////////////////// ENTRADA

                switch (entrouSala) {
                    case 1:
                        //JOptionPane.showMessageDialog(this, "Aguardando adversário!","Aguardando",JOptionPane.INFORMATION_MESSAGE);
                        //this.textoInfoSala.setVisible(true);
                        //this.textoInfoSala.setForeground(AZUL);
                        //this.textoInfoSala.setText("Aguardando adversário...");
                        //this.botaoEntrarSala.setText("Sair da Sala");
                        //this.botaoCadastrar.setEnabled(false);
                        //this.botaoEntrar.setEnabled(false);
                        //this.tabelaSalas.setEnabled(false);
                        //this.botaoVoltar.setEnabled(false);

                        saida.writeObject(6);
                        atualizaListaSalas();

                        segueProcurando = true;
                        aguardaAdversario = new Thread(aguardaAd);
                        aguardaAdversario.start();
                        break;
                    case 2:
                        //JOptionPane.showMessageDialog(this, "Aguardando adversário!", "Aguardando", JOptionPane.INFORMATION_MESSAGE);
                        //this.textoInfoSala.setVisible(true);
                        //this.textoInfoSala.setForeground(AZUL);
                        //this.textoInfoSala.setText("Aguardando adversário...");
                        //this.botaoEntrarSala.setText("Sair da Sala");
                        //this.botaoCadastrar.setEnabled(false);
                        //this.botaoEntrar.setEnabled(false);
                        //this.tabelaSalas.setEnabled(false);
                        //this.botaoVoltar.setEnabled(false);

                        saida.writeObject(6);
                        atualizaListaSalas();

                        segueProcurando = true;
                        aguardaAdversario = new Thread(aguardaAd);
                        aguardaAdversario.start();
                        break;
                    case -1:
                        this.textoInfoSala.setVisible(true);
                        this.textoInfoSala.setForeground(VERMELHO);
                        this.textoInfoSala.setText("Sala está cheia!");
                        break;
                    default:
                        break;
                }
                break;
        }

    }

    private boolean obtemConexaoServidor() {

        try {
            cliente = new Socket(IP, 12345);
            saida = new ObjectOutputStream(cliente.getOutputStream());
            saida.flush();
            entrada = new ObjectInputStream(cliente.getInputStream());

            if ((boolean) entrada.readObject()) { // Recebe OK de conexão do servidor!
                this.IDConexao = (int) entrada.readObject();
                this.textoNumOnline.setText(String.valueOf((int) (entrada.readObject()))); //Recebe numero de conectados do servidor.
                this.textoServidorOnOff.setText("Servidor Online");
                this.textoServidorOnOff.setForeground(VERDE);
                this.textoAguardandoLogin.setVisible(true);
                this.textoAguardandoLogin.setText("Aguardando Login...");
                this.botaoRepetir.setVisible(false);
                return true;
            } else {
                this.textoServidorOnOff.setText("Servidor Offline");
                this.textoServidorOnOff.setForeground(VERMELHO);
                this.textoAguardandoLogin.setText("Aguardando Conexão...");
                this.botaoRepetir.setText("Repetir");
                return false;
            }

        } catch (IOException | ClassNotFoundException ex) {
            this.textoServidorOnOff.setText("Servidor Offline");
            this.textoServidorOnOff.setForeground(VERMELHO);
            this.textoAguardandoLogin.setText("Aguardando Conexão...");
            this.botaoRepetir.setText("Repetir");
            return false;
        }

    }

    public void atualizaListaSalas() {
        try {
            DefaultTableModel tabSalas = (DefaultTableModel) this.tabelaSalas.getModel();
            
            int numSalas = (int) entrada.readObject(); //Recebe do servidor o numero de salas abertas no momento.
            int numJogadores = (int) entrada.readObject(); //Recebe do servidor o numero de jogadores logados no momento.

            int numLinhas = tabSalas.getRowCount();

            for (int x = 0; x < numLinhas; x++) {
                tabSalas.removeRow(0);
            }

            for (int x = 0; x < numSalas; x++) {
                String ID = (String) entrada.readObject(); //Recebe do servidor o ID das salas abertas
                String nick1 = (String) entrada.readObject(); //Recebe do servidor os jogadores presentes na posição de jogador 1 nas salas.
                String nick2 = (String) entrada.readObject(); //Recebe do servidor os jogadores presentes na posição de jogador 2 nas salas.
                int estado = (int) entrada.readObject(); //Reebe do servidor o estado da sala.

                if (nick1 == null) {
                    nick1 = "";
                }
                if (nick2 == null) {
                    nick2 = "";
                }
                tabSalas.addRow(new String[]{ID, nick1, nick2});

            }
            this.textoNumOnline.setText(String.valueOf(numJogadores));

        } catch (IOException | ClassNotFoundException ex) {
            ex.printStackTrace();
        }
    }

    private void saiSala() {

        try {
            saida.writeObject(7);

            saida.writeObject(IDConexao);
            int cod = (int) entrada.readObject();
            
            if (cod > 0) {
                this.textoInfoSala.setText("Você saiu da sala " + cod + "!");
                this.textoInfoSala.setVisible(true);
                this.textoInfoSala.setForeground(AZUL);
                this.tabelaSalas.setEnabled(true);
                this.botaoEntrarSala.setText("Entrar na Sala");
                this.textoUsuario.setEditable(true);
                this.botaoVoltar.setEnabled(true);
                
                this.entradaJogo.close();
                this.saidaJogo.close();
                
                this.segueProcurando = false;
            } else {
                this.textoInfoSala.setText("Não foi possível sair!");
                this.textoInfoSala.setVisible(true);
                this.textoInfoSala.setForeground(VERMELHO);
            }
        } catch (IOException | ClassNotFoundException ex) {
            System.out.println(ex);
        }
    }
    
    private void iniciaJogo(String nick){
        
        JanelaPrincipal novoJogo = new JanelaPrincipal(janelaMenu,this,this.entradaJogo,this.saidaJogo,this.textoUsuario.getText());
        novoJogo.setVisible(true);
        JanelaInfoAdversario janelaInfo = new JanelaInfoAdversario(nick,this.textoUsuario.getText(),novoJogo,this.entradaJogo,this.saidaJogo);
        janelaInfo.setVisible(true);
        
        this.setVisible(false);
        
    }
    
    public void voltaParaJanela(){
        
        try {
            
            this.botaoEntrarSala.setText("Entrar na Sala");
            this.botaoVoltar.setEnabled(true);
            this.tabelaSalas.setEnabled(true);
            this.textoInfoSala.setText("");
            this.textoInfoSala.setVisible(false);
            
            saida.writeObject(6);
            this.atualizaListaSalas();
        } catch (IOException ex) {
            Logger.getLogger(JanelaLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoCadastrar;
    private javax.swing.JButton botaoEntrar;
    public javax.swing.JButton botaoEntrarSala;
    private javax.swing.JButton botaoRefresh;
    private javax.swing.JButton botaoRepetir;
    private javax.swing.JButton botaoVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tabelaSalas;
    private javax.swing.JLabel textoAguardandoLogin;
    private javax.swing.JLabel textoAvisos;
    private javax.swing.JLabel textoInfoSala;
    private javax.swing.JLabel textoNumOnline;
    private javax.swing.JPasswordField textoSenha;
    private javax.swing.JLabel textoServidorOnOff;
    private javax.swing.JTextField textoUsuario;
    // End of variables declaration//GEN-END:variables

    public class AguardaAdversario implements Runnable {

        JanelaLogin jan;

        AguardaAdversario(JanelaLogin janela) {
            jan = janela;
        }

        public void run() {

            try {
                jan.comunicacaoClienteJogo = new Socket(IP, 12345);
                jan.saidaJogo = new ObjectOutputStream(jan.comunicacaoClienteJogo.getOutputStream());
                jan.saidaJogo.flush();
                jan.entradaJogo = new ObjectInputStream(jan.comunicacaoClienteJogo.getInputStream());
                
                if ((boolean) jan.entradaJogo.readObject()) { // Recebe OK de conexão do servidor!
                    jan.IDConexaoJogo = (int) entradaJogo.readObject();
                    textoNumOnline.setText(String.valueOf((int) (entradaJogo.readObject()))); //Recebe numero de conectados do servidor.
                    
                    jan.textoInfoSala.setVisible(true);
                    jan.textoInfoSala.setForeground(AZUL);
                    jan.textoInfoSala.setText("Aguardando adversário...");
                    jan.botaoEntrarSala.setText("Sair da Sala");
                    jan.botaoCadastrar.setEnabled(false);
                    jan.botaoEntrar.setEnabled(false);
                    jan.tabelaSalas.setEnabled(false);
                    jan.botaoVoltar.setEnabled(false);
                    
                    saidaJogo.writeObject(9);
                    saidaJogo.writeObject(jan.IDConexao);
                    
                    while (jan.segueProcurando) {
                        
                        saidaJogo.writeObject(10);
                        saidaJogo.writeObject(jan.IDConexaoJogo);
                        
                        String nickAdversario = (String)entradaJogo.readObject();
                        
                        if(nickAdversario != null){
                            iniciaJogo(nickAdversario);
                            break;
                        }
                            
                        Thread.sleep(500);
  
                    }
                    
                }
                
            } catch (IOException | ClassNotFoundException | InterruptedException e) {
                    
            }
            
        }
    }

}
