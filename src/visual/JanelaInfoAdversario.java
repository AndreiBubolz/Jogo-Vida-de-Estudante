/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visual;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author andreibubolz
 */
public class JanelaInfoAdversario extends javax.swing.JFrame {

    public JanelaPrincipal janelaJogo;
    private String nickJogador;
    private String nickAdversario;
    private AtualizaInfo atualizaInfo;
    private Thread threadAtualiza;
    private boolean segueAtualizando;
    private Queue<String> mensagensEnviar;
    private int posicaoNaSala;

    private boolean aguardaJogadorAceitar;
    private boolean enviaConviteBatalha;
    private boolean aguardandoAceitarNegar;
    private int aceitouDesafio;
    
    public JanelaInfoAdversario(String nickAdv, String nickJogad, JanelaPrincipal janela, ObjectInputStream in, ObjectOutputStream out) {

        initComponents();
        this.textoNomeAdversario.setText(nickAdv);
        this.janelaJogo = janela;

        this.nickAdversario = nickAdv;
        this.nickJogador = nickJogad;

        this.setLocation(janelaJogo.getLocation().x + 1272, janelaJogo.getLocation().y - 15);

        segueAtualizando = true;
        atualizaInfo = new AtualizaInfo(this);
        this.mensagensEnviar = new LinkedList();
        inicializaAtualizacaoInfo();
        this.botaoAceitar.setEnabled(false);
        this.botaoBatalhar.setEnabled(false);
        this.botaoRecusar.setEnabled(false);

        aguardaJogadorAceitar = false;
        enviaConviteBatalha = false;
        aguardandoAceitarNegar  = false;
        aceitouDesafio = 0;
    }

    private void inicializaAtualizacaoInfo() {
        threadAtualiza = new Thread(atualizaInfo);
        threadAtualiza.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        textoNomeAdversario = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textoChat = new javax.swing.JTextArea();
        textoInserirChat = new javax.swing.JTextField();
        botaoEnviarChat = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        barraDeVidaRival = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        textoDinheiroRival = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textoXP = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        textoVit = new javax.swing.JLabel();
        textoDerrotas = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        textoLocal = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        textoNumChaves = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        botaoBatalhar = new javax.swing.JButton();
        botaoAceitar = new javax.swing.JButton();
        botaoRecusar = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        barraAposta = new javax.swing.JSlider();
        textodinheiroBarraAposta = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textoInfoBatalha = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Modo Online");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        jLabel1.setText("Adversário:");

        textoNomeAdversario.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        textoNomeAdversario.setForeground(new java.awt.Color(0, 0, 204));
        textoNomeAdversario.setText("Nome....");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bate-Papo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Unispace", 1, 12), new java.awt.Color(51, 0, 153))); // NOI18N

        textoChat.setEditable(false);
        textoChat.setColumns(20);
        textoChat.setForeground(new java.awt.Color(255, 0, 0));
        textoChat.setRows(5);
        jScrollPane1.setViewportView(textoChat);

        textoInserirChat.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        textoInserirChat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textoInserirChatKeyPressed(evt);
            }
        });

        botaoEnviarChat.setFont(new java.awt.Font("Unispace", 1, 12)); // NOI18N
        botaoEnviarChat.setText("Enviar");
        botaoEnviarChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEnviarChatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textoInserirChat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoEnviarChat)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoEnviarChat)
                    .addComponent(textoInserirChat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jLabel2.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        jLabel2.setText("Vida:");

        barraDeVidaRival.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        barraDeVidaRival.setForeground(new java.awt.Color(0, 0, 0));
        barraDeVidaRival.setToolTipText("50");
        barraDeVidaRival.setValue(100);
        barraDeVidaRival.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        barraDeVidaRival.setPreferredSize(new java.awt.Dimension(155, 16));
        barraDeVidaRival.setRequestFocusEnabled(false);
        barraDeVidaRival.setString("50");
        barraDeVidaRival.setStringPainted(true);

        jLabel4.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        jLabel4.setText("Dinheiro:");

        textoDinheiroRival.setFont(new java.awt.Font("Unispace", 1, 15)); // NOI18N
        textoDinheiroRival.setForeground(new java.awt.Color(0, 153, 51));
        textoDinheiroRival.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textoDinheiroRival.setText("$ 150");
        textoDinheiroRival.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        jLabel3.setText("XP:");

        textoXP.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        textoXP.setForeground(new java.awt.Color(0, 0, 255));
        textoXP.setText("1000");

        jLabel6.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        jLabel6.setText("Vitórias:");

        jLabel7.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        jLabel7.setText("Derrotas:");

        textoVit.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        textoVit.setForeground(new java.awt.Color(0, 0, 255));
        textoVit.setText("0");

        textoDerrotas.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        textoDerrotas.setForeground(new java.awt.Color(0, 0, 255));
        textoDerrotas.setText("0");

        jLabel10.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        jLabel10.setText("Local:");

        textoLocal.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        textoLocal.setForeground(new java.awt.Color(0, 0, 255));
        textoLocal.setText("corredor da computação");

        jLabel11.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        jLabel11.setText("Chaves:");

        textoNumChaves.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        textoNumChaves.setForeground(new java.awt.Color(0, 0, 255));
        textoNumChaves.setText("0 de 4");

        botaoBatalhar.setFont(new java.awt.Font("Unispace", 1, 14)); // NOI18N
        botaoBatalhar.setForeground(new java.awt.Color(204, 51, 0));
        botaoBatalhar.setText("Batalhar");
        botaoBatalhar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBatalharActionPerformed(evt);
            }
        });

        botaoAceitar.setFont(new java.awt.Font("Unispace", 1, 14)); // NOI18N
        botaoAceitar.setForeground(new java.awt.Color(204, 51, 0));
        botaoAceitar.setText("Aceitar");
        botaoAceitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAceitarActionPerformed(evt);
            }
        });

        botaoRecusar.setFont(new java.awt.Font("Unispace", 1, 14)); // NOI18N
        botaoRecusar.setForeground(new java.awt.Color(204, 51, 0));
        botaoRecusar.setText("Recusar");
        botaoRecusar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRecusarActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 153, 0));
        jLabel12.setText("Apostar:");

        barraAposta.setValue(20);
        barraAposta.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                barraApostaMouseDragged(evt);
            }
        });
        barraAposta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                barraApostaMouseClicked(evt);
            }
        });

        textodinheiroBarraAposta.setFont(new java.awt.Font("Unispace", 1, 16)); // NOI18N
        textodinheiroBarraAposta.setForeground(new java.awt.Color(0, 153, 51));
        textodinheiroBarraAposta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textodinheiroBarraAposta.setText("$ 20");
        textodinheiroBarraAposta.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informações de Batalha", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Unispace", 1, 12), new java.awt.Color(51, 0, 153))); // NOI18N

        textoInfoBatalha.setEditable(false);
        textoInfoBatalha.setColumns(20);
        textoInfoBatalha.setForeground(new java.awt.Color(255, 0, 51));
        textoInfoBatalha.setRows(5);
        jScrollPane2.setViewportView(textoInfoBatalha);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator4)
            .addComponent(jSeparator5)
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator6)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(barraAposta, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textodinheiroBarraAposta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoNomeAdversario, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoXP, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoVit, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addGap(4, 4, 4)
                        .addComponent(textoDerrotas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(botaoBatalhar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botaoAceitar, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoRecusar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textoDinheiroRival, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(barraDeVidaRival, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textoLocal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textoNumChaves, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(textoNomeAdversario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textoXP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textoVit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textoDerrotas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(barraDeVidaRival, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textoDinheiroRival))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textoLocal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textoNumChaves, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(barraAposta, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textodinheiroBarraAposta, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoBatalhar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoAceitar)
                    .addComponent(botaoRecusar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void barraApostaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barraApostaMouseClicked
        this.textodinheiroBarraAposta.setText("$ " + this.barraAposta.getValue());
    }//GEN-LAST:event_barraApostaMouseClicked

    private void barraApostaMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barraApostaMouseDragged
        this.textodinheiroBarraAposta.setText("$ " + this.barraAposta.getValue());
    }//GEN-LAST:event_barraApostaMouseDragged

    private void botaoEnviarChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEnviarChatActionPerformed
        enviaMensagem();
    }//GEN-LAST:event_botaoEnviarChatActionPerformed

    private void textoInserirChatKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoInserirChatKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            enviaMensagem();
        }

    }//GEN-LAST:event_textoInserirChatKeyPressed

    private void botaoBatalharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBatalharActionPerformed
        aguardaJogadorAceitar = true;
        enviaConviteBatalha = true;
        this.textoInfoBatalha.setText("");
        this.textoInfoBatalha.append("Aguardando resposta de " + nickAdversario + "!\n");

    }//GEN-LAST:event_botaoBatalharActionPerformed

    private void botaoAceitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAceitarActionPerformed
        this.aceitouDesafio = 1;
    }//GEN-LAST:event_botaoAceitarActionPerformed

    private void botaoRecusarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRecusarActionPerformed
        this.aceitouDesafio = 2;
    }//GEN-LAST:event_botaoRecusarActionPerformed

    private void enviaMensagem() {

        this.mensagensEnviar.offer(this.textoInserirChat.getText());
        this.textoChat.append("Você >> " + this.textoInserirChat.getText() + "\n");
        this.textoInserirChat.setText("");

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaInfoAdversario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaInfoAdversario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaInfoAdversario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaInfoAdversario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider barraAposta;
    private javax.swing.JProgressBar barraDeVidaRival;
    private javax.swing.JButton botaoAceitar;
    private javax.swing.JButton botaoBatalhar;
    private javax.swing.JButton botaoEnviarChat;
    private javax.swing.JButton botaoRecusar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTextArea textoChat;
    private javax.swing.JLabel textoDerrotas;
    private javax.swing.JLabel textoDinheiroRival;
    private javax.swing.JTextArea textoInfoBatalha;
    private javax.swing.JTextField textoInserirChat;
    private javax.swing.JLabel textoLocal;
    private javax.swing.JLabel textoNomeAdversario;
    private javax.swing.JLabel textoNumChaves;
    private javax.swing.JLabel textoVit;
    private javax.swing.JLabel textoXP;
    private javax.swing.JLabel textodinheiroBarraAposta;
    // End of variables declaration//GEN-END:variables

    public class AtualizaInfo implements Runnable {

        JanelaInfoAdversario janelaInfo;
        JanelaPrincipal principal;

        private ObjectOutputStream saida;
        private ObjectInputStream entrada;

        AtualizaInfo(JanelaInfoAdversario ja) {
            this.janelaInfo = ja;
            this.saida = janelaInfo.janelaJogo.saidaJogo;
            this.entrada = janelaInfo.janelaJogo.entradaJogo;
            this.principal = this.janelaInfo.janelaJogo;
        }

        public void run() {
            int vit = 0;
            boolean erro = false;
            while (janelaInfo.segueAtualizando) {
                
                try {

                    saida.writeObject(11); //Envia informacao para servidor;

                    saida.writeObject(janelaInfo.nickJogador);
                    saida.writeObject(principal.getDinheiroAtual());
                    saida.writeObject(principal.getVidaAtual());
                    saida.writeObject(principal.getLocalAtual());
                    saida.writeObject(principal.getNumChavesAtual());

                    saida.writeObject(12); //Recebe informacao do servidor;

                    saida.writeObject(janelaInfo.nickAdversario);

                    int XPRival = (int) entrada.readObject();
                    int numV = (int) entrada.readObject();
                    int numD = (int) entrada.readObject();
                    int dinheiroRival = (int) entrada.readObject();
                    int vidaRival = (int) entrada.readObject();
                    String localRival = (String) entrada.readObject();
                    int numChavesRival = (int) entrada.readObject();
                    int posicaoRival = (int) entrada.readObject();

                    if (posicaoRival == 1) {
                        janelaInfo.posicaoNaSala = 2;
                    } else if (posicaoRival == 2) {
                        janelaInfo.posicaoNaSala = 1;
                    } else {
                        System.out.println("DEU RUIM");
                    }

                    atualizaMapasOnline(janelaJogo.game.currentRoom.getShortDescription(), localRival, principal.getNumChavesAtual());

                    janelaInfo.textoXP.setText(String.valueOf(XPRival));
                    janelaInfo.textoVit.setText(String.valueOf(numV));
                    janelaInfo.textoDerrotas.setText(String.valueOf(numD));
                    janelaInfo.textoDinheiroRival.setText("$ " + dinheiroRival);
                    janelaInfo.barraDeVidaRival.setValue(vidaRival);
                    janelaInfo.barraDeVidaRival.setString(String.valueOf(vidaRival));
                    janelaInfo.textoLocal.setText(converteNomeLocal(localRival));
                    janelaInfo.textoNumChaves.setText(numChavesRival + " de 4");

                    saida.writeObject(13); //Recebe mensagens armazenadas do servidor.

                    saida.writeObject(janelaInfo.nickJogador);

                    boolean temMsg = (boolean) entrada.readObject();

                    while (temMsg) {
                        String mensagem = (String) entrada.readObject();
                        if (mensagem != null) {
                            janelaInfo.textoChat.append(janelaInfo.textoNomeAdversario.getText() + " >> " + mensagem + "\n");
                        }

                        temMsg = (boolean) entrada.readObject();
                    }

                    saida.writeObject(14); //Envia Mensagens para servidor.
                    saida.writeObject(janelaInfo.nickAdversario);

                    boolean temEnvioMsg = !this.janelaInfo.mensagensEnviar.isEmpty();

                    if (temEnvioMsg) {
                        saida.writeObject(this.janelaInfo.mensagensEnviar.poll());
                    } else {
                        saida.writeObject(null);
                    }

                    if (principal.getLocalAtual().equals(localRival) && !aguardaJogadorAceitar && !aguardandoAceitarNegar) {
                        this.janelaInfo.botaoBatalhar.setEnabled(true);
                    } else {
                        this.janelaInfo.botaoBatalhar.setEnabled(false);
                    }

                    if (principal.game.vitoria) {   //Avisa pro servidor que ganhou.
                        saida.writeObject(15);
                        saida.writeObject(nickJogador);
                        vit = 1;

                        break;
                    }

                    if (principal.game.desistiu) {
                        saida.writeObject(15);
                        saida.writeObject(nickAdversario);
                    }

                    //Pergunta pro servidor se alguem ganhou.
                    saida.writeObject(16);
                    saida.writeObject(nickAdversario);
                    saida.writeObject(nickJogador);
                    saida.writeObject(principal.game.desistiu);
                    boolean resposta = (boolean) entrada.readObject();
                    boolean resposta2 = (boolean) entrada.readObject();

                    if (resposta) {
                        vit = 2;

                        break;
                    }
                    if (resposta2) {
                        vit = 1;

                        break;
                    }

                    if (enviaConviteBatalha) {

                        saida.writeObject(17);
                        saida.writeObject(nickJogador);
                        saida.writeObject(nickAdversario);
                        if(janelaInfo.barraAposta.getValue() < Integer.valueOf(janelaInfo.textoDinheiroRival.getText().replace("$ ", "")))
                            saida.writeObject(janelaInfo.barraAposta.getValue());
                        else
                            saida.writeObject(Integer.valueOf(janelaInfo.textoDinheiroRival.getText().replace("$ ", "")));
                        //saida.writeObject(janelaJogo.heroi.getPoderAtaque());
                        //saida.writeObject(janelaJogo.heroi.getPoderDefesa());

                        enviaConviteBatalha = false;
                    }

                    if(!aguardandoAceitarNegar){
                        saida.writeObject(18);
                        saida.writeObject(nickJogador);
                        boolean temDesafiante = (boolean) entrada.readObject();

                        if (temDesafiante) {
                            String nickAdv = (String) entrada.readObject();
                            int valorAposta = (int) entrada.readObject();

                            janelaInfo.botaoBatalhar.setEnabled(false);
                            janelaInfo.botaoAceitar.setEnabled(true);
                            janelaInfo.botaoRecusar.setEnabled(true);

                            janelaInfo.textoInfoBatalha.setText("");

                            if (valorAposta > 0) {
                                janelaInfo.textoInfoBatalha.append(nickAdv + " quer batalhar com você!\nUma aposta de $" + valorAposta + " foi feita!\nDeseja Aceitar?");
                            } else {
                                janelaInfo.textoInfoBatalha.append(nickAdv + " quer batalhar com você!\nDeseja Aceitar?");
                            }
                            aguardandoAceitarNegar = true;
                        }
                    }
                    
                    if(aceitouDesafio == 1){
                        saida.writeObject(19);
                        saida.writeObject(1);
                        saida.writeObject(nickJogador);
                        saida.writeObject(nickAdversario);
                        
                    }else if(aceitouDesafio == 2){
                        saida.writeObject(19);
                        saida.writeObject(2);
                        saida.writeObject(nickJogador);
                        saida.writeObject(nickAdversario);
                        
                    }
                    
                    saida.writeObject(20);
                    saida.writeObject(nickJogador);
                    
                    boolean temResultado = (boolean)entrada.readObject();
                    
                    if(temResultado){
                        int seuNum = (int) entrada.readObject();
                        int numAdv = (int) entrada.readObject();
                        int valorAposta = (int) entrada.readObject();
                        
                        janelaInfo.textoInfoBatalha.setText("");
                        if(seuNum > numAdv){
                            janelaInfo.textoInfoBatalha.append("Você venceu a batalha!\n$"+valorAposta+" foi adicionado ao seu dinheiro!\n");
                            janelaJogo.heroi.getMochila().addDinheiro(valorAposta);
                            
                        }else if(seuNum < numAdv){
                            janelaInfo.textoInfoBatalha.append("Você perdeu a batalha!\n$"+valorAposta+" foi retirado do seu dinheiro!\n");
                            janelaJogo.heroi.getMochila().retiraDinheiro(valorAposta);
                            janelaJogo.heroi.decrementar((int)(janelaJogo.barraDeVida.getValue() * 0.1) );
                            
                        }else{
                            janelaInfo.textoInfoBatalha.append("Batalha empatada!\nNinguem perdeu nada!\n");
                        }
                            
                        janelaInfo.textoInfoBatalha.append("Numero do adversário: "+numAdv+"\n");
                        janelaInfo.textoInfoBatalha.append("Seu número: "+seuNum+"\n");
                        
                        janelaInfo.botaoAceitar.setEnabled(false);
                        janelaInfo.botaoRecusar.setEnabled(false);
                        janelaInfo.botaoBatalhar.setEnabled(true);
                        aguardaJogadorAceitar = false;
                        enviaConviteBatalha = false;
                        aguardandoAceitarNegar  = false;
                        aceitouDesafio = 0;
                        janelaJogo.atualizaGeral(4);
                    }
                    
                    
                } catch (IOException | ClassNotFoundException ex) {
                    
                    JOptionPane.showMessageDialog(janelaJogo, "Conexão com o servidor perdida! ", "ERRO", JOptionPane.ERROR_MESSAGE);
                    
                    janelaInfo.janelaJogo.janelaMenu.setVisible(true);
                    janelaInfo.janelaJogo.dispose();
                    janelaInfo.dispose();
                    
                    
                    janelaInfo.segueAtualizando = false;
                    erro = true;
                    break;
                }

            }
            if(!erro){
                try {
                    saida.writeObject(21);
                } catch (IOException ex) {

                }
                voltaMenuLogin(vit, principal.game.desistiu);
            }
            
        }

        public void atualizaMapasOnline(String localJogador, String localRival, int numChaves) {

            if (janelaInfo.posicaoNaSala == 1) {
                if (numChaves != 4) {
                    attMapaJogadorVermelho(localJogador, localRival, "Fechado");
                } else {
                    attMapaJogadorVermelho(localJogador, localRival, "Aberto");
                }

            } else if (janelaInfo.posicaoNaSala == 2) {
                if (numChaves != 4) {
                    attMapaJogadorAzul(localJogador, localRival, "Fechado");
                } else {
                    attMapaJogadorAzul(localJogador, localRival, "Aberto");
                }
            }
        }

        public void attMapaJogadorVermelho(String jog, String adv, String abertoOuFechado) {

            String lugar1 = transformaNomeMapa(jog);
            String lugar2 = transformaNomeMapa(adv);

            if (!lugar1.equals("salaSecreta1") && !lugar1.equals("salaSecreta2") && !lugar2.equals("salaSecreta1") && !lugar2.equals("salaSecreta2")) { 
            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-"+abertoOuFechado+"-"+lugar1+"-"+lugar2+".png")));
            } else {

                if (lugar1.equals("salaSecreta1") || lugar1.equals("salaSecreta2")) {
                    switch (jog) {
                        case "na sala secreta 1":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/salaSecreta1.png")));
                            break;
                        case "na sala secreta 2":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/salaSecreta2.png")));
                            break;
                    }
                } else if (lugar2.equals("salaSecreta1") || lugar2.equals("salaSecreta2")) {
                    switch (jog) {
                        case "na sala 101":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-101.png")));
                            break;
                        case "na sala 102":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-102.png")));
                            break;
                        case "na sala 103":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-103.png")));
                            break;
                        case "na sala 104":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-104.png")));
                            break;
                        case "na rua":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-Rua.png")));
                            break;
                        case "na biblioteca":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-bibli.png")));
                            break;
                        case "no corredor da computação":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-Corredor.png")));
                            break;
                        case "no laboratório de programação":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-labProg.png")));
                            break;
                        case "no laboratório de circuitos digitais":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-CD.png")));
                            break;
                        case "na sala de cálculo":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-calculo.png")));
                            break;
                        case "na sala de física":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-fisica.png")));
                            break;
                        case "na cantina":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-Cantina.png")));
                            break;
                        case "no banheiro":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-banheiro.png")));
                            break;
                    }
                }
            }

        }

        public void attMapaJogadorAzul(String jog, String adv, String abertoOuFechado) {

            String lugar1 = transformaNomeMapa(jog);
            String lugar2 = transformaNomeMapa(adv);

            if (!lugar1.equals("salaSecreta1") && !lugar1.equals("salaSecreta2") && !lugar2.equals("salaSecreta1") && !lugar2.equals("salaSecreta2")) {     
                
             janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/mapa1-" + abertoOuFechado + "-" + lugar2 + "-" + lugar1 + ".png")));
            } else {

                if (lugar1.equals("salaSecreta1") || lugar1.equals("salaSecreta2")) {
                    switch (jog) {
                        case "na sala secreta 1":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-salaSecreta1.png")));
                            break;
                        case "na sala secreta 2":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-salaSecreta2.png")));
                            break;
                    }
                } else if (lugar2.equals("salaSecreta1") || lugar2.equals("salaSecreta2")) {
                    switch (jog) {
                        case "na sala 101":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-101.png")));
                            break;
                        case "na sala 102":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-102.png")));
                            break;
                        case "na sala 103":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-103.png")));
                            break;
                        case "na sala 104":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-104.png")));
                            break;
                        case "na rua":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-Rua.png")));
                            break;
                        case "na biblioteca":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-bibli.png")));
                            break;
                        case "no corredor da computação":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-Corredor.png")));
                            break;
                        case "no laboratório de programação":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-labProg.png")));
                            break;
                        case "no laboratório de circuitos digitais":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-CD.png")));
                            break;
                        case "na sala de cálculo":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-calculo.png")));
                            break;
                        case "na sala de física":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-fisica.png")));
                            break;
                        case "na cantina":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-Cantina.png")));
                            break;
                        case "no banheiro":
                            janelaJogo.imagemMapa.setIcon(new ImageIcon(getClass().getResource("/imgs/Mapas/level1/Azul-" + abertoOuFechado + "-banheiro.png")));
                            break;
                    }
                }

            }

        }

    }

    public String transformaNomeMapa(String nome) {

        switch (nome.toLowerCase()) {
            case "na sala secreta 1":
                return "salaSecreta1";
            case "na sala secreta 2":
                return "salaSecreta2";
            case "na sala 101":
                return "101";
            case "na sala 102":
                return "102";
            case "na sala 103":
                return "103";
            case "na sala 104":
                return "104";
            case "na rua":
                return "Rua";
            case "na biblioteca":
                return "bibli";
            case "no corredor da computação":
                return "Corredor";
            case "no laboratório de programação":
                return "labProg";
            case "no laboratório de circuitos digitais":
                return "CD";
            case "na sala de cálculo":
                return "calculo";
            case "na sala de física":
                return "fisica";
            case "na cantina":
                return "Cantina";
            case "no banheiro":
                return "banheiro";
            default:
                return null;

        }

    }

    public void voltaMenuLogin(int vitDerr, boolean desistiu) { //1-vit //2-derrota

        if (desistiu) {
            JOptionPane.showMessageDialog(this.janelaJogo, "Você desistiu! XP +0 ", "Frangote", JOptionPane.INFORMATION_MESSAGE);
        } else if (vitDerr == 1) {
            JOptionPane.showMessageDialog(this.janelaJogo, "Parábens, você venceu a vida de estudante.\n XP +1000 ", "Parabéns", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this.janelaJogo, "Você perdeu a vida de estudante.\n XP +250 ", "Tente novamente!", JOptionPane.INFORMATION_MESSAGE);
        }

        this.dispose();
        this.janelaJogo.dispose();
        this.janelaJogo.janelaLogin.setVisible(true);
        this.janelaJogo.janelaLogin.voltaParaJanela();

    }

    private String converteNomeLocal(String local) {

        switch (local) {
            case "na sala secreta 1":
                return "Sala Secreta 1";
            case "na sala secreta 2":
                return "Sala Secreta 2";
            case "na sala 101":
                return "Sala 101";
            case "na sala 102":
                return "Sala 102";
            case "na sala 103":
                return "Sala 103";
            case "na sala 104":
                return "Sala 104";
            case "na rua":
                return "Rua";
            case "na biblioteca":
                return "Biblioteca";
            case "no corredor da computação":
                return "Corredor da Computação";
            case "no laboratório de programação":
                return "Laboratório de Programação";
            case "no laboratório de circuitos digitais":
                return "Laboratório de Circ. Digitais";
            case "na sala de cálculo":
                return "Sala de Cálculo";
            case "na sala de física":
                return "Sala de Física";
            case "na cantina":
                return "Cantina";
            case "no banheiro":
                return "Banheiro";
            default:
                return null;
        }
    }
}
